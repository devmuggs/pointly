// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// basic user model
model User {
  id       String @id @default(uuid())
  email    String @unique
  name     String
  password String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards    UserCard[]
  groups   GroupMembership[]
  transactions Transaction[]
}

enum GroupRole {
  OWNER
  ADMIN
  MEMBER
}

model GroupMembership { 
  userId  String
  groupId String

  roleId  String?
  role    GroupRole @default(MEMBER)

  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
  @@id([userId, groupId])
} 

// A group may contains users, cards, and currencies
model Group {
  id    String @id @default(uuid())
  name  String
  description String?

  users GroupMembership[]
  currencies Currency[]
  purchasable Purchasable[]
}


// A predefined purchasable item that can be bought with points (i.e. doing the dishes, 1 hour of game time, etc.)
model Purchasable {
  id          String @id @default(uuid())

  name        String
  description String?
  
  prices       Price[] // Prices for this purchasable item in different currencies
  transactions Transaction[] // Transactions where this item was purchased
  
  groupId     String?
  group       Group? @relation(fields: [groupId], references: [id])
}

// The act of purchasing a purchasable item with points
model Transaction {
  id          String @id @default(uuid())
  userId      String
  cardId      String

  timestamp   DateTime @default(now())
  
  user        User   @relation(fields: [userId], references: [id])
  card        UserCard @relation(fields: [userId, cardId], references: [userId, cardId])
  
  purchasableId String?
  purchasable   Purchasable? @relation(fields: [purchasableId], references: [id])
}

model Price {
  id          String @id @default(uuid())
  amount      Float

  currencyId  String
  currency    Currency @relation(fields: [currencyId], references: [id])

  purchasableId String
  purchasable   Purchasable @relation(fields: [purchasableId], references: [id])
}

model Currency {
  id          String @id @default(uuid())
  name        String
  symbol      String

  groupId    String?
  group      Group? @relation(fields: [groupId], references: [id])

  cards       Card[]
  prices      Price[]
}

// A Card represents a specific currency that can be used to purchase items, includes things like name, description, image, base colour
model Card {
  id          String @id @default(uuid())
  name        String
  description String?
  baseColour   String

  currencyId  String
  currency    Currency @relation(fields: [currencyId], references: [id])

  users       UserCard[]
}

model UserCard {
  userId      String
  cardId      String

  balance     Float @default(0)
  transactions Transaction[]

  user        User @relation(fields: [userId], references: [id])
  card        Card @relation(fields: [cardId], references: [id])

  @@id([userId, cardId])
}